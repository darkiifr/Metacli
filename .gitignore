# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is recommended to ignore the entire .idea directory.
.idea/

# VS Code
.vscode/
*.code-workspace

# Sublime Text
*.sublime-project
*.sublime-workspace

# Vim
*.swp
*.swo
*~

# Emacs
*~
\#*\#
/.emacs.desktop
/.emacs.desktop.lock
*.elc
auto-save-list
tramp
.\#*

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db
Desktop.ini

# Windows
*.lnk

# Linux
*~

# Application-specific files
# MetaCLI logs
metacli.log
metacli_*.log
metacli_gui.log
*.log

# MetaCLI configuration and user data
.metacli_config.json
user_preferences.json
settings.json

# MetaCLI installer and build artifacts (large files)
installer_build/
installer_dist/
installer_output/
MetaCLI_Portable/
build_output/
portable_build/

# Executable files
*.exe
*.msi
*.dmg
*.pkg
*.deb
*.rpm
*.app

# PyInstaller build files
*.spec
build/
dist/
*.manifest
*.toc
*.pyz
localpycs/
warn-*.txt
xref-*.html

# Test files and outputs
test_files/
test_output/
test_*.json
test_*.csv
test_*.yaml
test_*.yml
test_image.jpg
test_image.py

# Sample files for testing
sample_files/
example_files/

# Export files (unless specifically needed)
export_*.json
export_*.csv
export_*.yaml
export_*.yml
metadata_export.*
metadata_*.json
metadata_*.csv
metadata_*.yaml
metadata_*.yml
output/
results/

# Cache directories
.cache/
cache/
.metacli_cache/
__pycache__/
*.pyc
*.pyo

# Temporary files
*.tmp
*.temp
*.bak
*.backup

# Build artifacts
build/
dist/
*.egg-info/

# Documentation builds
docs/build/
docs/_build/

# Configuration files with sensitive data
config.ini
config.json
.env.local
.env.production

# IDE and editor files
.vscode/
.idea/
*.sublime-*

# Profiling data
*.prof
*.pstats

# Database files
*.db
*.sqlite
*.sqlite3

# Jupyter Notebook checkpoints
.ipynb_checkpoints/

# pytest
.pytest_cache/

# Coverage reports
htmlcov/
.coverage
coverage.xml
*.cover

# Type checking
.mypy_cache/
.dmypy.json
dmypy.json

# Linting
.flake8
.pylintrc

# Security
*.pem
*.key
*.crt
*.p12

# Local development
local_settings.py
dev_settings.py

# Package files
*.tar.gz
*.zip
*.rar
*.7z

# Exclude specific directories that might contain test data
test_data/
sample_data/
example_data/

# Version and update files
version_info.json
update_info.json
latest_version.json

# Hash files
*.sha256
*.md5
hashes.txt
installation_hashes.json

# Batch files (except essential ones)
*.bat
!run_cli.bat
!run_gui.bat

# Temporary installer files
temp_installer/
installer_temp/

# Plugin directories
plugins/
extensions/

# Documentation builds
docs/build/
docs/_build/

# But include example configuration files
!example_config.json
!sample_config.yaml
!config.example.ini
!INSTALLER_README.md
!PORTABLE_README.txt
!INSTALLER_COMPLETE.md